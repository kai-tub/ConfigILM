# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: ConfigVLM Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  test:
    name: Run tests & display coverage
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      #  Run test suite + coverage + generate badge
      #----------------------------------------------
      - name: Run tests + generate coverage
        run: |
          source .venv/bin/activate
          coverage run -m pytest
      - name: Generate coverage report
        run: |
          source .venv/bin/activate
          coverage report
      - name: Generate coverage badge
        uses: tj-actions/coverage-badge-py@v1.8
      #  if something was changed, commit
      - name: Commit coverage badge
        run: |
          git config --global user.name 'Leonard Hackel'
          git config --global user.email 'lhackel-tub@users.noreply.github.com'
          if ! git diff-index --quiet HEAD; then git commit -am "Automated coverage report"; git push; fi
